.program quadrature_encoder
.origin 0

; 00 state
	JMP update	; read 00
	JMP decrement	; read 01
	JMP increment	; read 10
	JMP update	; read 11
; 01 state
	JMP increment	; read 00
	JMP update	; read 01
	JMP update	; read 10
	JMP decrement	; read 11

; 10 state
	JMP decrement	; read 00
	JMP update	; read 01
	JMP update	; read 10
	JMP increment	; read 11

; 11 state
	JMP update	; read 00
	JMP increment	; read 01
decrement:
	; note: the target of this instruction must be the next address, so that
	; the effect of the instruction does not depend on the value of Y. The
	; same is true for the "JMP X--" below. Basically "JMP Y--, <next addr>"
	; is just a pure "decrement Y" instruction, with no other side effects
	JMP Y--, update	; read 10

	; this is where the main loop starts
.wrap_target
update:
	; we start by checking the TX FIFO to see if the main code is asking for
	; the current count after the PULL noblock, OSR will have either 0 if
	; there was nothing or the value that was there
	SET X, 0
	PULL noblock

	; since there are not many free registers, and PULL is done into OSR, we
	; have to do some juggling to avoid losing the state information and
	; still place the values where we need them
	MOV X, OSR
	MOV OSR, ISR

	; the main code did not ask for the count, so just go to "sample_pins"
	JMP !X, sample_pins

	; if it did ask for the count, then we push it
	MOV ISR, Y	; we trash ISR, but we already have a copy in OSR
	PUSH

sample_pins:
	; we shift into ISR the last state of the 2 input pins (now in OSR) and
	; the new state of the 2 pins, thus producing the 4 bit target for the
	; computed jump into the correct action for this state
	MOV ISR, NULL
	IN OSR, 2
	IN PINS, 2
	MOV PC, ISR

	; the PIO does not have a increment instruction, so to do that we do a
	; negate, decrement, negate sequence
increment:
	MOV X, !Y
	JMP X--, increment_cont
increment_cont:
	MOV Y, !X
.wrap	; the .wrap here avoids one jump instruction and saves a cycle too

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void quadrature_encoder_program_init(PIO pio, uint sm, uint offset, uint pin, int max_step_rate)
{
	pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
	gpio_pull_up(pin);
	gpio_pull_up(pin + 1);

	pio_sm_config c = quadrature_encoder_program_get_default_config(offset);
	sm_config_set_in_pins(&c, pin); // for WAIT, IN
	sm_config_set_jmp_pin(&c, pin); // for JMP
	// shift to left, autopull disabled
	sm_config_set_in_shift(&c, false, false, 32);
	// don't join FIFO's
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

	// passing "0" as the sample frequency,
	if (max_step_rate == 0) {
		sm_config_set_clkdiv(&c, 1.0);
	} else {
		// one state machine loop takes at most 14 cycles
		float div = (float)clock_get_hz(clk_sys) / (14 * max_step_rate);
		sm_config_set_clkdiv(&c, div);
	}

	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}
static inline void quadrature_encoder_request_count(PIO pio, uint sm)
{
	pio->txf[sm] = 1;
}
static inline int32_t quadrature_encoder_fetch_count(PIO pio, uint sm)
{
	while (pio_sm_is_rx_fifo_empty(pio, sm))
		tight_loop_contents();
	return pio->rxf[sm];
}
static inline int32_t quadrature_encoder_get_count(PIO pio, uint sm)
{
	quadrature_encoder_request_count(pio, sm);
	return quadrature_encoder_fetch_count(pio, sm);
}
%}